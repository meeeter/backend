const app = require("../app");
const debug = require("debug")("meeter-server:server");
const http = require("http");
const socketIo = require("socket.io");

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: '*',
  }
});

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

io.on("connection", (socket) => {
  console.log("User connected:", socket.id);

  socket.on("disconnect", () => {
    console.log("User disconnected", socket.id);
  });

  socket.on("sendFriendRequest", async (request) => {
    try {
      const User = require("../models/User");

      const sender = await User.findByIdAndUpdate(
        request.sender,
        {
          $push: {
            friendRequestsSent: {
              toUser: request.recipient,
              status: "pending",
            },
          },
        },
        { new: true }
      );

      const recipient = await User.findByIdAndUpdate(
        request.recipient,
        {
          $push: {
            friendRequestsReceived: {
              fromUser: request.sender,
              status: "pending",
            },
          },
        },
        { new: true }
      );
    } catch (error) {
      console.error(error);
    }
  });
});

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
